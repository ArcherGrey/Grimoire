(window.webpackJsonp=window.webpackJsonp||[]).push([[99],{500:function(t,s,a){"use strict";a.r(s);var n=a(19),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"类型判断"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型判断"}},[t._v("#")]),t._v(" 类型判断")]),t._v(" "),a("p",[t._v("其实常规方法主要有四种")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("typeof")])]),t._v(" "),a("li",[a("code",[t._v("instanceof")])]),t._v(" "),a("li",[a("code",[t._v("Object.prototype.toString")])]),t._v(" "),a("li",[a("code",[t._v("constructor")])])]),t._v(" "),a("p",[t._v("其实这四种方式归根结底就是两种思路：")]),t._v(" "),a("ul",[a("li",[t._v("根据数据类型判断（1，2）")]),t._v(" "),a("li",[t._v("根据构造函数判断（3，4）`")])]),t._v(" "),a("h2",{attrs:{id:"typeof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#typeof"}},[t._v("#")]),t._v(" typeof")]),t._v(" "),a("p",[a("code",[t._v("typeof")]),t._v(" 是一元运算符，基本上只能判断出来使用字面量方式赋值的基本数据类型，无法具体区分"),a("code",[t._v("object")]),t._v("类型，它可以做的事情有：")]),t._v(" "),a("ul",[a("li",[t._v("检查一个变量是否存在，是否有值："),a("code",[t._v("typeof")]),t._v(" 只有在两种情况下返回 "),a("code",[t._v("undefined")]),t._v(" "),a("ul",[a("li",[t._v("变量没有声明")]),t._v(" "),a("li",[t._v("变量没有初始化")])])]),t._v(" "),a("li",[t._v("判断一个值不等于 "),a("code",[t._v("undefined")]),t._v(" 也不等于 "),a("code",[t._v("null")]),t._v("："),a("code",[t._v("typeof null=object")]),t._v("（"),a("code",[t._v("javascript")]),t._v(" 遗留"),a("code",[t._v("bug")]),t._v("）\n"),a("ul",[a("li",[a("code",[t._v("typeof null=object")]),t._v(" 是由于 "),a("code",[t._v("javascript")]),t._v(" 用 32 位二进制保存，"),a("code",[t._v("object")]),t._v(" 低 3 位为 0，"),a("code",[t._v("null")]),t._v(" 所有位都是 0 没有单独判断导致 "),a("code",[t._v("bug")])])])]),t._v(" "),a("li",[t._v("区别对象和原始值")]),t._v(" "),a("li",[t._v("原始值的类型")]),t._v(" "),a("li",[t._v("判断是否是函数")])]),t._v(" "),a("h2",{attrs:{id:"instanceof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#instanceof"}},[t._v("#")]),t._v(" instanceof")]),t._v(" "),a("p",[a("code",[t._v("instanceof")]),t._v(" 用来判断对象实例的具体类型（包括继承关系），也就是后面的变量在前面的变量的原型链上即可。")]),t._v(" "),a("p",[a("code",[t._v("instanceof")]),t._v(" 的原理可以认为是如下：")]),t._v(" "),a("div",{staticClass:"language-JavaScript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("instance_of")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("L")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("R")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//L 表示左表达式，R 表示右表达式")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("O")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("R")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 取 R 的显示原型")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("L")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("L")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("               "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 取 L 的隐式原型")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("L")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("O")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("L")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("                 "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里重点：当 O 严格等于 L 时，返回 true")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("L")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("L")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br")])]),a("p",[a("code",[t._v("instanceof")]),t._v(" 的局限性就是不能检测基本数据类型。通过对 "),a("code",[t._v("instanceof")]),t._v(" 的原理进行分析，我们可以得知，只要左边的对象的对象能够通过原型链 "),a("code",[t._v("__proto__")]),t._v(" 是指向右边的构造函数就可以\n"),a("code",[t._v("instanceof")]),t._v(" 右边必须是对象或构造函数，否则会抛出 "),a("code",[t._v("TypeError")]),t._v(" 的错误。")]),t._v(" "),a("img",{attrs:{src:t.$withBase("/js_typeof_1.jpg"),alt:"关系图"}}),t._v(" "),a("p",[t._v("代码实现：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 思路：右边变量的原型存在于左边变量的原型链上")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("instanceOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" right")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" leftValue "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" rightValue "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("leftValue "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("leftValue "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" rightValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    leftValue "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" leftValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br")])]),a("h2",{attrs:{id:"object-prototype-tostring"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-prototype-tostring"}},[t._v("#")]),t._v(" Object.prototype.toString")]),t._v(" "),a("p",[t._v("所有的数据类型都可以用 "),a("code",[t._v("Object.prototype.toString")]),t._v(" 来检测,而且非常的精准。")]),t._v(" "),a("p",[a("code",[t._v("ECMAScript 5")]),t._v("中，"),a("code",[t._v("Object.prototype.toString()")]),t._v(" 被调用时，会进行如下步骤：")]),t._v(" "),a("ol",[a("li",[t._v("如果 "),a("code",[t._v("this")]),t._v(" 是 "),a("code",[t._v("undefined")]),t._v(" ，返回 "),a("code",[t._v("[object Undefined]")])]),t._v(" "),a("li",[t._v("如果 "),a("code",[t._v("this")]),t._v(" 是 "),a("code",[t._v("null")]),t._v("， 返回 "),a("code",[t._v("[object Null]")])]),t._v(" "),a("li",[t._v("令 "),a("code",[t._v("Object")]),t._v(" 为以 "),a("code",[t._v("this")]),t._v(" 作为参数调用 "),a("code",[t._v("ToObject")]),t._v(" 的结果")]),t._v(" "),a("li",[t._v("令 "),a("code",[t._v("class")]),t._v(" 为 "),a("code",[t._v("Object")]),t._v(" 的内部属性 "),a("code",[t._v("[[Class]]")]),t._v(" 的值")]),t._v(" "),a("li",[t._v("返回三个字符串 "),a("code",[t._v("[object, class]")]),t._v(" 拼接而成的字符串")])]),t._v(" "),a("p",[t._v("注：本规范的每种内置对象都定义了 "),a("code",[t._v("[[Class]]")]),t._v(" 内部属性的值。宿主对象的 "),a("code",[t._v("[[Class]]")]),t._v(" 内部属性的值可以是除了 "),a("code",[t._v('"Arguments", "Array", "Boolean", "Date", "Error", "Function", "JSON", "Math", "Number", "Object", "RegExp", "String"')]),t._v(" 的任何字符串。"),a("code",[t._v("[[Class]]")]),t._v(" 内部属性的值用于内部区分对象的种类。本规范中除了通过 "),a("code",[t._v("Object.prototype.toString")]),t._v(" 没有提供任何手段使程序访问此值。")]),t._v(" "),a("h2",{attrs:{id:"construtor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#construtor"}},[t._v("#")]),t._v(" construtor")]),t._v(" "),a("p",[a("code",[t._v("constructor")]),t._v(" 属性返回对创建此对象的数组函数的引用。")]),t._v(" "),a("p",[t._v("无论是通过字面量或者构造函数创建的基本类型，都可以检测出。并且也可以检测出 "),a("code",[t._v("Array、Object、Function")]),t._v("引用类型，但是不能检测出 "),a("code",[t._v("Null")]),t._v(" 和 "),a("code",[t._v("Undefined")])])])}),[],!1,null,null,null);s.default=e.exports}}]);